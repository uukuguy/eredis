diff -rupN riak_search/src/riak_search_client.erl riak_search-new/src/riak_search_client.erl
--- riak_search/src/riak_search_client.erl	2014-02-03 09:52:52.000000000 +0800
+++ riak_search-new/src/riak_search_client.erl	2014-02-03 09:47:03.000000000 +0800
@@ -1,10 +1,10 @@
 %% -------------------------------------------------------------------
 %%
-%% Copyright (c) 2007-2010 Basho Technologies, Inc.  All Rights Reserved.
+%% Copyright (c) 2007-2013 Basho Technologies, Inc.  All Rights Reserved.
 %%
 %% -------------------------------------------------------------------
 
--module(riak_search_client, [RiakClient]).
+-module(riak_search_client).
 
 -include("riak_search.hrl").
 
@@ -12,31 +12,36 @@
 -define(OPTIMIZER_PROC_CT, 32).
 
 -export([
+    new/1,
     %% Searching...
-    parse_query/2,
-    parse_filter/2,
-    search/6,
+    parse_query/3,
+    parse_filter/3,
     search/7,
-    search_fold/6,
-    search_doc/6,
+    search/8,
+    search_fold/7,
     search_doc/7,
+    search_doc/8,
 
     %% Indexing...
-    index_doc/1,
-    index_docs/1,
-    index_term/5, index_term/6,
-    index_terms/1,
+    index_doc/2,
+    index_docs/2,
+    index_term/6, index_term/7,
+    index_terms/2,
 
     %% Delete
-    delete_docs/1,
-    delete_doc_terms/1,
-    delete_term/4,
-    delete_terms/1
+    delete_docs/2,
+    delete_doc_terms/2,
+    delete_term/5,
+    delete_terms/2
 ]).
 
+%% Create tuple module, used to implicitly pass the riak client to other functions in this module.
+new(RiakClient) ->
+    {?MODULE, [RiakClient]}.
+
 %% Parse the provided query. Returns either {ok, QueryOps} or {error,
 %% Error}.
-parse_query(IndexOrSchema, Query) ->
+parse_query(IndexOrSchema, Query, {?MODULE, [_RiakClient]}) ->
     {ok, Schema} = riak_search_config:get_schema(IndexOrSchema),
     DefaultIndex = Schema:name(),
     DefaultField = Schema:default_field(),
@@ -48,9 +53,9 @@ parse_query(IndexOrSchema, Query) ->
 
 %% Parse the provided filter. Returns either {ok, FilterOps} or {error,
 %% Error}.
-parse_filter(_, Filter) when Filter == <<>> orelse Filter == "" ->
+parse_filter(_, Filter, {?MODULE, [_RiakClient]}) when Filter == <<>> orelse Filter == "" ->
     {ok, []};
-parse_filter(IndexOrSchema, Filter) ->
+parse_filter(IndexOrSchema, Filter, {?MODULE, [_RiakClient]}) ->
     {ok, Schema} = riak_search_config:get_schema(IndexOrSchema),
     DefaultIndex = Schema:name(),
     DefaultField = Schema:default_field(),
@@ -65,11 +70,11 @@ parse_filter(IndexOrSchema, Filter) ->
 %% Run the Query, return the list of keys.
 %% Timeout is in milliseconds.
 %% Return the {Length, Results}.
-search(IndexOrSchema, QueryOps, FilterOps, QueryStart, QueryRows, Timeout) ->
+search(IndexOrSchema, QueryOps, FilterOps, QueryStart, QueryRows, Timeout, {?MODULE, [_RiakClient]}=THIS) ->
     search(IndexOrSchema, QueryOps, FilterOps, QueryStart, QueryRows, score,
-           Timeout).
+           Timeout, THIS).
 
-search(IndexOrSchema, QueryOps, FilterOps, QueryStart, QueryRows, PresortBy, Timeout)
+search(IndexOrSchema, QueryOps, FilterOps, QueryStart, QueryRows, PresortBy, Timeout, {?MODULE, [_RiakClient]})
   when PresortBy == key; PresortBy == score ->
 
     T1 = os:timestamp(),
@@ -116,7 +121,7 @@ search(IndexOrSchema, QueryOps, FilterOp
 
 %% Run the search query, fold results through function, return final
 %% accumulator.
-search_fold(IndexOrSchema, QueryOps, FilterOps, Fun, AccIn, Timeout) ->
+search_fold(IndexOrSchema, QueryOps, FilterOps, Fun, AccIn, Timeout, {?MODULE, [_RiakClient]}) ->
     T1 = os:timestamp(),
     riak_search_stat:update(search_fold_begin),
 
@@ -134,17 +139,17 @@ search_fold(IndexOrSchema, QueryOps, Fil
     riak_search_stat:update({search_fold_end, TD}),
     R.
 
-search_doc(IndexOrSchema, QueryOps, FilterOps, QueryStart, QueryRows, Timeout) ->
+search_doc(IndexOrSchema, QueryOps, FilterOps, QueryStart, QueryRows, Timeout, {?MODULE, [_RiakClient]}=THIS) ->
     search_doc(IndexOrSchema, QueryOps, FilterOps, QueryStart, QueryRows,
-               score, Timeout).
+               score, Timeout, THIS).
 
 search_doc(IndexOrSchema, QueryOps, FilterOps, QueryStart, QueryRows,
-           PresortBy, Timeout)
+           PresortBy, Timeout, {?MODULE, [RiakClient]}=THIS)
   when PresortBy == key; PresortBy == score ->
     T1 = os:timestamp(),
     riak_search_stat:update(search_doc_begin),
 
-    {Length, Results} = search(IndexOrSchema, QueryOps, FilterOps, QueryStart, QueryRows, PresortBy, Timeout),
+    {Length, Results} = search(IndexOrSchema, QueryOps, FilterOps, QueryStart, QueryRows, PresortBy, Timeout, THIS),
     MaxScore = case Results of
                    [] ->
                        "0.0";
@@ -163,10 +168,10 @@ search_doc(IndexOrSchema, QueryOps, Filt
     R.
 
 %% Index a specified #riak_idx_doc
-index_doc(IdxDoc) ->
-    index_docs([IdxDoc]).
+index_doc(IdxDoc, {?MODULE, [_RiakClient]}=THIS) ->
+    index_docs([IdxDoc], THIS).
 
-index_docs(IdxDocs) ->
+index_docs(IdxDocs, {?MODULE, [RiakClient]}=THIS) ->
     %% For each doc, update the object stored in Riak KV, and generate
     %% a list of postings to add and delete.
     F = fun(IdxDoc0, {RiakObjsAccIn, DeleteAccIn, IndexAccIn}) ->
@@ -204,22 +209,22 @@ index_docs(IdxDocs) ->
 
     %% Delete the old postings...
     FlatDeleteAcc = lists:flatten(DeleteAcc),
-    delete_terms(FlatDeleteAcc),
+    delete_terms(FlatDeleteAcc, THIS),
 
     %% Add the new postings...
     FlatIndexAcc = lists:flatten(IndexAcc),
-    index_terms(FlatIndexAcc),
+    index_terms(FlatIndexAcc, THIS),
     ok.
 
 %% Index the specified term - better to use the plural 'terms' interfaces
-index_term(Index, Field, Term, DocID, Props) ->
+index_term(Index, Field, Term, DocID, Props, {?MODULE, [_RiakClient]}=THIS) ->
     K = riak_search_utils:current_key_clock(),
-    index_term(Index, Field, Term, DocID, Props, K).
+    index_term(Index, Field, Term, DocID, Props, K, THIS).
 
-index_term(Index, Field, Term, DocID, Props, K) ->
-    index_terms([{Index, Field, Term, DocID, Props, K}]).
+index_term(Index, Field, Term, DocID, Props, K, {?MODULE, [_RiakClient]}=THIS) ->
+    index_terms([{Index, Field, Term, DocID, Props, K}], THIS).
 
-index_terms(Terms) ->
+index_terms(Terms, {?MODULE, [_RiakClient]}) ->
     IndexFun = fun(VNode, Postings) ->
                        riak_search_vnode:index(VNode, Postings)
                end,
@@ -307,7 +312,7 @@ process_terms_1(IndexFun, BatchSize, Pre
 
 
 %% Docs is a list of the form [{DocIndex, DocID}].
-delete_docs(Docs) ->
+delete_docs(Docs, {?MODULE, [RiakClient]}=THIS) ->
     F = fun({DocIndex, DocID}, {ObjsAccIn, DeleteAccIn}) ->
                 case riak_indexed_doc:get(RiakClient, DocIndex, DocID) of
                     IdxDoc when is_record(IdxDoc, riak_idx_doc) ->
@@ -323,7 +328,7 @@ delete_docs(Docs) ->
 
     %% Delete the postings...
     FlatDeleteAcc = lists:flatten(DeleteAcc),
-    delete_terms(FlatDeleteAcc),
+    delete_terms(FlatDeleteAcc, THIS),
 
     %% Delete the Riak objects...
     [riak_indexed_doc:delete(RiakClient, DocIndex, DocID)
@@ -332,17 +337,17 @@ delete_docs(Docs) ->
 
 
 %% Delete all of the indexed terms in the IdxDoc - does not remove the IdxDoc itself
-delete_doc_terms(IdxDoc) ->
+delete_doc_terms(IdxDoc, {?MODULE, [_RiakClient]}=THIS) ->
     %% Build a list of terms to delete and send them over to the delete FSM
     Postings = riak_indexed_doc:postings(IdxDoc),
-    delete_terms(Postings).
+    delete_terms(Postings, THIS).
 
 %% Delete the specified term - better to use the plural 'terms' interfaces.
-delete_term(Index, Field, Term, DocID) ->
+delete_term(Index, Field, Term, DocID, {?MODULE, [_RiakClient]}=THIS) ->
     K =  riak_search_utils:current_key_clock(),
-    delete_terms([{Index, Field, Term, DocID, K}]).
+    delete_terms([{Index, Field, Term, DocID, K}], THIS).
 
-delete_terms(Terms) ->
+delete_terms(Terms, {?MODULE, [_RiakClient]}) ->
     DeleteFun = fun(VNode, Postings) ->
                         riak_search_vnode:delete(VNode, Postings)
                 end,
diff -rupN riak_search/src/riak_search_ring_utils.erl riak_search-new/src/riak_search_ring_utils.erl
--- riak_search/src/riak_search_ring_utils.erl	2014-02-03 09:52:52.000000000 +0800
+++ riak_search-new/src/riak_search_ring_utils.erl	2014-02-03 09:49:10.000000000 +0800
@@ -150,4 +150,4 @@ zip_with_partition_and_index(Postings) -
 %% term and kills performance.
 -spec calc_partition(index(), field(), term()) -> binary().
 calc_partition(Index, Field, Term) ->
-    crypto:sha(term_to_binary({Index, Field, Term})).
+    crypto:hash(sha, term_to_binary({Index, Field, Term})).
diff -rupN riak_search/src/riak_search_schema.erl riak_search-new/src/riak_search_schema.erl
--- riak_search/src/riak_search_schema.erl	2014-02-03 09:52:52.000000000 +0800
+++ riak_search-new/src/riak_search_schema.erl	2014-02-03 09:47:03.000000000 +0800
@@ -1,145 +1,150 @@
 %% -------------------------------------------------------------------
 %%
-%% Copyright (c) 2007-2010 Basho Technologies, Inc.  All Rights Reserved.
+%% Copyright (c) 2007-2013 Basho Technologies, Inc.  All Rights Reserved.
 %%
 %% -------------------------------------------------------------------
 
--module(riak_search_schema, [Name, Version, NVal, DefaultField, UniqueKey, Fields, DefaultOp, AnalyzerFactory]).
+-module(riak_search_schema).
 -export([
+    new/8,
     %% Properties...
-    name/0,
-    set_name/1,
-    version/0,
-    n_val/0,
-    fields_and_inlines/0,
-    inline_fields/0,
-    fields/0,
-    unique_key/0,
-    default_field/0,
-    set_default_field/1,
-    default_op/0,
-    analyzer_factory/0,
-    set_default_op/1,
+    name/1,
+    set_name/2,
+    version/1,
+    n_val/1,
+    fields_and_inlines/1,
+    inline_fields/1,
+    fields/1,
+    unique_key/1,
+    default_field/1,
+    set_default_field/2,
+    default_op/1,
+    analyzer_factory/1,
+    set_default_op/2,
 
     %% Field properties...
-    field_name/1,
-    field_type/1,
-    padding_size/1,
-    padding_char/1,
-    is_dynamic/1,
-    is_field_required/1,
-    analyzer_factory/1,
-    analyzer_args/1,
-    field_inline/1,
-    is_skip/1,
-    aliases/1,
+    field_name/2,
+    field_type/2,
+    padding_size/2,
+    padding_char/2,
+    is_dynamic/2,
+    is_field_required/2,
+    analyzer_factory/2,
+    analyzer_args/2,
+    field_inline/2,
+    is_skip/2,
+    aliases/2,
 
     %% Field lookup
-    find_field/1,
+    find_field/2,
 
     %% Validation
-    validate_commands/2
+    validate_commands/3
 ]).
 
 -include("riak_search.hrl").
 
-name() ->
+new(Name, Version, NVal, DefaultField, UniqueKey, Fields, DefaultOp, AnalyzerFactory) ->
+    {?MODULE, [Name,Version,NVal,DefaultField,UniqueKey,Fields,DefaultOp,AnalyzerFactory]}.
+
+name({?MODULE, [Name,_Version,_NVal,_DefaultField,_UniqueKey,_Fields,_DefaultOp,_AnalyzerFactory]}) ->
     riak_search_utils:to_binary(Name).
 
-set_name(NewName) ->
+set_name(NewName, {?MODULE, [_Name,Version,NVal,DefaultField,UniqueKey,Fields,DefaultOp,AnalyzerFactory]}) ->
     ?MODULE:new(NewName, Version, NVal, DefaultField, UniqueKey, Fields, DefaultOp, AnalyzerFactory).
 
-version() ->
+version({?MODULE, [_Name,Version,_NVal,_DefaultField,_UniqueKey,_Fields,_DefaultOp,_AnalyzerFactory]}) ->
     Version.
 
-n_val() ->
+n_val({?MODULE, [_Name,_Version,NVal,_DefaultField,_UniqueKey,_Fields,_DefaultOp,_AnalyzerFactory]}) ->
     NVal.
 
-fields_and_inlines() ->
+fields_and_inlines({?MODULE, [_Name,_Version,_NVal,_DefaultField,_UniqueKey,Fields,_DefaultOp,_AnalyzerFactory]}) ->
     Fields.
 
-fields() ->
+fields({?MODULE, [_Name,_Version,_NVal,_DefaultField,_UniqueKey,Fields,_DefaultOp,_AnalyzerFactory]}) ->
     [X || X <- Fields, X#riak_search_field.inline == false].
 
-inline_fields() ->
+inline_fields({?MODULE, [_Name,_Version,_NVal,_DefaultField,_UniqueKey,Fields,_DefaultOp,_AnalyzerFactory]}) ->
     [X || X <- Fields, X#riak_search_field.inline == true].
 
-unique_key() ->
+unique_key({?MODULE, [_Name,_Version,_NVal,_DefaultField,UniqueKey,_Fields,_DefaultOp,_AnalyzerFactory]}) ->
     UniqueKey.
 
-default_field() ->
+default_field({?MODULE, [_Name,_Version,_NVal,DefaultField,_UniqueKey,_Fields,_DefaultOp,_AnalyzerFactory]}) ->
     DefaultField.
 
-analyzer_factory() when is_list(AnalyzerFactory) ->
+analyzer_factory({?MODULE, [_Name,_Version,_NVal,_DefaultField,_UniqueKey,_Fields,_DefaultOp,AnalyzerFactory]})
+  when is_list(AnalyzerFactory) ->
     list_to_binary(AnalyzerFactory);
-analyzer_factory() ->
+analyzer_factory({?MODULE, [_Name,_Version,_NVal,_DefaultField,_UniqueKey,_Fields,_DefaultOp,AnalyzerFactory]}) ->
     AnalyzerFactory.
 
-set_default_field(NewDefaultField) ->
+set_default_field(NewDefaultField, {?MODULE, [Name,Version,NVal,_DefaultField,UniqueKey,Fields,DefaultOp,AnalyzerFactory]}) ->
     ?MODULE:new(Name, Version, NVal, NewDefaultField, UniqueKey, Fields, DefaultOp, AnalyzerFactory).
 
-default_op() ->
+default_op({?MODULE, [_Name,_Version,_NVal,_DefaultField,_UniqueKey,_Fields,DefaultOp,_AnalyzerFactory]}) ->
     DefaultOp.
 
-set_default_op(NewDefaultOp) ->
+set_default_op(NewDefaultOp, {?MODULE, [Name,Version,NVal,DefaultField,UniqueKey,Fields,_DefaultOp,AnalyzerFactory]}) ->
     ?MODULE:new(Name, Version, NVal, DefaultField, UniqueKey, Fields, NewDefaultOp, AnalyzerFactory).
 
-field_name(Field) ->
+field_name(Field, {?MODULE, [_Name,_Version,_NVal,_DefaultField,_UniqueKey,_Fields,_DefaultOp,_AnalyzerFactory]}) ->
     Field#riak_search_field.name.
 
-field_type(Field) ->
+field_type(Field, {?MODULE, [_Name,_Version,_NVal,_DefaultField,_UniqueKey,_Fields,_DefaultOp,_AnalyzerFactory]}) ->
     Field#riak_search_field.type.
 
-padding_size(Field) ->
+padding_size(Field, {?MODULE, [_Name,_Version,_NVal,_DefaultField,_UniqueKey,_Fields,_DefaultOp,_AnalyzerFactory]}) ->
     Field#riak_search_field.padding_size.
 
-padding_char(Field) ->
+padding_char(Field, {?MODULE, [_Name,_Version,_NVal,_DefaultField,_UniqueKey,_Fields,_DefaultOp,_AnalyzerFactory]}) ->
     Field#riak_search_field.padding_char.
 
-is_dynamic(Field) ->
+is_dynamic(Field, {?MODULE, [_Name,_Version,_NVal,_DefaultField,_UniqueKey,_Fields,_DefaultOp,_AnalyzerFactory]}) ->
     Field#riak_search_field.dynamic == true.
 
-is_field_required(Field) ->
+is_field_required(Field, {?MODULE, [_Name,_Version,_NVal,_DefaultField,_UniqueKey,_Fields,_DefaultOp,_AnalyzerFactory]}) ->
     Field#riak_search_field.required == true.
 
-analyzer_factory(Field) ->
+analyzer_factory(Field, {?MODULE, [_Name,_Version,_NVal,_DefaultField,_UniqueKey,_Fields,_DefaultOp,_AnalyzerFactory]}) ->
     Field#riak_search_field.analyzer_factory.
 
-analyzer_args(Field) ->
+analyzer_args(Field, {?MODULE, [_Name,_Version,_NVal,_DefaultField,_UniqueKey,_Fields,_DefaultOp,_AnalyzerFactory]}) ->
     Field#riak_search_field.analyzer_args.
 
-field_inline(Field) ->
+field_inline(Field, {?MODULE, [_Name,_Version,_NVal,_DefaultField,_UniqueKey,_Fields,_DefaultOp,_AnalyzerFactory]}) ->
     Field#riak_search_field.inline.
 
-is_skip(Field) ->
+is_skip(Field, {?MODULE, [_Name,_Version,_NVal,_DefaultField,_UniqueKey,_Fields,_DefaultOp,_AnalyzerFactory]}) ->
     Field#riak_search_field.skip == true.
 
-aliases(Field) ->
+aliases(Field, {?MODULE, [_Name,_Version,_NVal,_DefaultField,_UniqueKey,_Fields,_DefaultOp,_AnalyzerFactory]}) ->
     [element(2, T) || T <- Field#riak_search_field.aliases].
 
 %% Return the field matching the specified name, or 'undefined'
-find_field(FName) ->
-    find_field(FName, Fields).
+find_field(FName, {?MODULE, [_Name,_Version,_NVal,_DefaultField,_UniqueKey,Fields,_DefaultOp,_AnalyzerFactory]}=THIS) ->
+    find_field(FName, Fields, THIS).
 
-find_field(FName, [Field|Rest]) ->
+find_field(FName, [Field|Rest], {?MODULE, [_Name,_Version,_NVal,_DefaultField,_UniqueKey,_Fields,_DefaultOp,_AnalyzerFactory]}=THIS) ->
     case Field#riak_search_field.dynamic of
         true ->
             case re:run(FName, Field#riak_search_field.name) of
                 {match, _} ->
                     Field;
                 nomatch ->
-                    find_field(FName, Rest)
+                    find_field(FName, Rest, THIS)
             end;
         false ->
-            case FName == Field#riak_search_field.name orelse 
+            case FName == Field#riak_search_field.name orelse
                 matches_alias(FName, Field#riak_search_field.aliases) of
                 true ->
                     Field;
-                false ->                 
-                    find_field(FName, Rest)
+                false ->
+                    find_field(FName, Rest, THIS)
             end
     end;
-find_field(FName, []) ->
+find_field(FName, [], _) ->
     throw({error, missing_field, FName}).
 
 %% Return true if the name matches an alias
@@ -162,10 +167,10 @@ matches_alias(FName, [{re, _Alias, MP}|A
 
 %% Verify that the schema names match. If so, then validate required
 %% and optional fields. Otherwise, return an error.
-validate_commands(add, Docs) ->
+validate_commands(add, Docs, {?MODULE, [_Name,_Version,_NVal,_DefaultField,_UniqueKey,Fields,_DefaultOp,_AnalyzerFactory]}) ->
     Required = [F || F <- Fields, F#riak_search_field.required =:= true],
     validate_required_fields(Docs, Required);
-validate_commands(_, _) ->
+validate_commands(_, _, _) ->
     ok.
 
 %% @private
@@ -192,5 +197,3 @@ validate_required_fields_1(Doc, [Field|R
         error ->
             {error, {reqd_field_missing, FieldName}}
     end.
-
-              
diff -rupN riak_search/src/riak_solr_search_client.erl riak_search-new/src/riak_solr_search_client.erl
--- riak_search/src/riak_solr_search_client.erl	2014-02-03 09:52:52.000000000 +0800
+++ riak_search-new/src/riak_solr_search_client.erl	2014-02-03 09:50:18.000000000 +0800
@@ -1,12 +1,13 @@
 %% -------------------------------------------------------------------
 %%
-%% Copyright (c) 2007-2010 Basho Technologies, Inc.  All Rights Reserved.
+%% Copyright (c) 2007-2013 Basho Technologies, Inc.  All Rights Reserved.
 %%
 %% -------------------------------------------------------------------
 
--module(riak_solr_search_client, [RiakClient, SearchClient]).
--export([parse_solr_xml/2,
-         run_solr_command/3
+-module(riak_solr_search_client).
+-export([new/2,
+         parse_solr_xml/3,
+         run_solr_command/4
 ]).
 
 -import(riak_search_utils, [to_list/1, to_binary/1]).
@@ -14,8 +15,11 @@
 
 -include("riak_search.hrl").
 
+new(RiakClient, SearchClient) ->
+    {?MODULE, [RiakClient, SearchClient]}.
+
 %% Parse a solr XML formatted file.
-parse_solr_xml(IndexOrSchema, Body) when is_binary(Body) ->
+parse_solr_xml(IndexOrSchema, Body, {?MODULE, [_RiakClient, _SearchClient]}=THIS) when is_binary(Body) ->
     %% Get the schema...
     {ok, Schema} = riak_search_config:get_schema(IndexOrSchema),
 
@@ -26,18 +30,18 @@ parse_solr_xml(IndexOrSchema, Body) when
     %% yet, and doesn't do any validation.  {ok, Command, Entries} =
     %% riak_solr_xml:parse(Body),
 
-    ParsedDocs = [parse_solr_entry(Schema, Command, X) || X <- Entries],
+    ParsedDocs = [parse_solr_entry(Schema, Command, X, THIS) || X <- Entries],
     {ok, Command, ParsedDocs}.
 
 %% @private
 %% Parse a document to add...
-parse_solr_entry(Schema, add, {<<"doc">>, Entry}) ->
+parse_solr_entry(Schema, add, {<<"doc">>, Entry}, {?MODULE, [_RiakClient, _SearchClient]}) ->
     IdxDoc0 = to_riak_idx_doc(Schema, Entry),
     IdxDoc = riak_indexed_doc:analyze(IdxDoc0),
     IdxDoc;
 
 %% Deletion by ID or Query. If query, then parse...
-parse_solr_entry(Schema, delete, {<<"id">>, ID}) ->
+parse_solr_entry(Schema, delete, {<<"id">>, ID}, {?MODULE, [_RiakClient, _SearchClient]}) ->
     case string:tokens(to_list(ID), ":") of
         [] ->
             throw({?MODULE, empty_id_on_solr_delete});
@@ -46,7 +50,7 @@ parse_solr_entry(Schema, delete, {<<"id"
         [H|T] -> 
             {'id', to_binary(H), to_binary(string:join(T, ":"))}
     end;
-parse_solr_entry(Schema, delete, {<<"query">>, Query}) ->
+parse_solr_entry(Schema, delete, {<<"query">>, Query}, {?MODULE, [_RiakClient, SearchClient]}) ->
     Index = Schema:name(),
     case SearchClient:parse_query(Index, binary_to_list(Query)) of
         {ok, QueryOps} ->
@@ -57,7 +61,7 @@ parse_solr_entry(Schema, delete, {<<"que
     end;
 
 %% Some unknown command...
-parse_solr_entry(_, Command, Entry) ->
+parse_solr_entry(_, Command, Entry, _) ->
     throw({?MODULE, unknown_command, Command, Entry}).
 
 
@@ -76,18 +80,18 @@ to_riak_idx_doc(Schema, Doc) ->
 
 
 %% Run the provided solr command on the provided docs...
-run_solr_command(_, _, []) ->
+run_solr_command(_, _, [], _) ->
     ok;
 
 %% Add a list of documents to the index...
-run_solr_command(_Schema, add, Docs) ->
+run_solr_command(_Schema, add, Docs, {?MODULE, [_RiakClient, SearchClient]}) ->
     %% Delete the terms out of the old document, the idxdoc stored 
     %% under k/v will be updated with the new postings.
     SearchClient:index_docs(Docs),
     ok;
 
 %% Delete a document by ID...
-run_solr_command(Schema, delete, Docs) ->
+run_solr_command(Schema, delete, Docs, {?MODULE, [_RiakClient, SearchClient]}) ->
     F = fun({'id', Index, ID}, Acc) ->
                 [{Index, ID}|Acc];
            ({'query', QueryOps}, Acc) ->
@@ -100,6 +104,6 @@ run_solr_command(Schema, delete, Docs) -
     ok;
 
 %% Unknown command, so error...
-run_solr_command(_Schema, Command, _Docs) ->
+run_solr_command(_Schema, Command, _Docs, _THIS) ->
     lager:error("Unknown solr command: ~p", [Command]),
     throw({unknown_solr_command, Command}).
